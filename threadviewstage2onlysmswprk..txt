import React, { useState, useEffect } from 'react';
import {
  View,
  Text,
  FlatList,
  StyleSheet,
  TextInput,
  TouchableOpacity,
  KeyboardAvoidingView,
  Platform,
  ActivityIndicator,
  Alert,
  PermissionsAndroid,
  Image,
} from 'react-native';
import { NativeModules } from 'react-native';
import { launchCamera, launchImageLibrary } from 'react-native-image-picker';
import Icon from 'react-native-vector-icons/FontAwesome6';
import { 
  compressImageForSMS, 
  isCompressedImage, 
  decompressImageForDisplay 
} from '../Utils/smsImageUtils';

const { DirectMessagingModule } = NativeModules;

const ThreadView = ({ route, navigation }) => {
  const { address } = route.params;
  const [messages, setMessages] = useState([]);
  const [loading, setLoading] = useState(false);
  const [newMessage, setNewMessage] = useState('');
  const [sending, setSending] = useState(false);

  useEffect(() => {
    navigation.setOptions({ title: address });
    loadMessages();
  }, [address]);

  const loadMessages = async () => {
    setLoading(true);
    try {
      const msgs = await DirectMessagingModule.getMessagesForThread(address);
      const formattedMsgs = msgs.map(msg => ({
        ...msg,
        type: msg.type || (msg.address === address ? 2 : 1),
      }));
      setMessages(formattedMsgs);
    } catch (error) {
      console.error('Failed to load messages:', error);
    } finally {
      setLoading(false);
    }
  };

  const sendMessage = async () => {
    if (!newMessage.trim()) return;
    setSending(true);
    const tempId = Date.now().toString();

    const newMsg = {
      id: tempId,
      body: newMessage,
      timestamp: Date.now(),
      type: 2,
      address: address,
    };

    setMessages(prev => [newMsg, ...prev]);
    setNewMessage('');

    try {
      await DirectMessagingModule.sendDirectSms(address, newMessage);
      await loadMessages();
    } catch (error) {
      console.error('Error sending message:', error);
      setMessages(prev => prev.filter(msg => msg.id !== tempId));
      Alert.alert('Error', 'Failed to send message');
    } finally {
      setSending(false);
    }
  };

  const requestCameraPermission = async () => {
    if (Platform.OS === 'android') {
      const hasPermission = await PermissionsAndroid.check(
        PermissionsAndroid.PERMISSIONS.CAMERA
      );
      if (hasPermission) return true;

      const granted = await PermissionsAndroid.request(
        PermissionsAndroid.PERMISSIONS.CAMERA,
        {
          title: 'Camera Permission',
          message: 'App needs access to your camera to take photos.',
          buttonNeutral: 'Ask Me Later',
          buttonNegative: 'Cancel',
          buttonPositive: 'OK',
        }
      );
      return granted === PermissionsAndroid.RESULTS.GRANTED;
    }
    return true;
  };

  const requestGalleryPermission = async () => {
    if (Platform.OS === 'android') {
      if (Platform.Version >= 30) {
        // Android 11 (API 30) and above
        return true; // No permission needed for gallery access
      } else if (Platform.Version >= 29) {
        // Android 10 (API 29)
        const hasPermission = await PermissionsAndroid.check(
          PermissionsAndroid.PERMISSIONS.READ_EXTERNAL_STORAGE
        );
        if (hasPermission) return true;

        const granted = await PermissionsAndroid.request(
          PermissionsAndroid.PERMISSIONS.READ_EXTERNAL_STORAGE,
          {
            title: 'Storage Permission',
            message: 'App needs access to your files to select photos',
            buttonPositive: 'OK',
            buttonNegative: 'Cancel'
          }
        );
        return granted === PermissionsAndroid.RESULTS.GRANTED;
      } else {
        // Android 9 (API 28) and below
        const hasWrite = await PermissionsAndroid.check(
          PermissionsAndroid.PERMISSIONS.WRITE_EXTERNAL_STORAGE
        );
        if (hasWrite) return true;

        const granted = await PermissionsAndroid.request(
          PermissionsAndroid.PERMISSIONS.WRITE_EXTERNAL_STORAGE,
          {
            title: 'Storage Permission',
            message: 'App needs access to your files to select photos',
            buttonPositive: 'OK',
            buttonNegative: 'Cancel'
          }
        );
        return granted === PermissionsAndroid.RESULTS.GRANTED;
      }
    }
    return true; // iOS handles this differently
  };

  const handleImagePick = () => {
    Alert.alert('Select Image Source', '', [
      {
        text: 'Camera',
        onPress: async () => {
          try {
            const hasPermission = await requestCameraPermission();
            if (!hasPermission) {
              Alert.alert('Permission required', 'Camera permission denied');
              return;
            }
            
            launchCamera({
              mediaType: 'photo',
              includeBase64: false,
              quality: 0.7,
              saveToPhotos: false,
              cameraType: 'back'
            }, async (response) => {
              if (response.didCancel) {
                console.log('User cancelled camera');
              } else if (response.errorCode) {
                Alert.alert('Camera Error', response.errorMessage || 'Unknown error');
              } else if (response.assets?.[0]?.uri) {
                try {
                  const compressed = await compressImageForSMS(response.assets[0].uri);
                  setNewMessage(compressed);
                } catch (error) {
                  console.error('Image compression error:', error);
                  Alert.alert('Error', 'Failed to compress image');
                }
              }
            });
          } catch (error) {
            console.error('Camera error:', error);
            Alert.alert('Error', 'Failed to access camera');
          }
        }
      },
      {
        text: 'Gallery',
        onPress: async () => {
          try {
            if (Platform.OS === 'android' && Platform.Version < 29) {
              const hasPermission = await requestGalleryPermission();
              if (!hasPermission) return;
            }

            launchImageLibrary({
              mediaType: 'photo',
              includeBase64: false,
              quality: 0.7,
              selectionLimit: 1
            }, async (response) => {
              if (response.didCancel) {
                console.log('User cancelled gallery');
              } else if (response.errorCode) {
                Alert.alert('Gallery Error', response.errorMessage || 'Unknown error');
              } else if (response.assets?.[0]?.uri) {
                try {
                  const compressed = await compressImageForSMS(response.assets[0].uri);
                  setNewMessage(compressed);
                } catch (error) {
                  console.error('Image compression error:', error);
                  Alert.alert('Error', 'Failed to compress image');
                }
              }
            });
          } catch (error) {
            console.error('Gallery error:', error);
            Alert.alert('Error', 'Failed to access gallery');
          }
        }
      },
      { 
        text: 'Cancel', 
        style: 'cancel' 
      }
    ]);
  };

  const renderItem = ({ item }) => {
    const isImage = isCompressedImage(item.body);
    const imageUri = isImage ? decompressImageForDisplay(item.body) : null;

    return (
      <View
        style={[
          styles.messageBubble,
          item.type === 2 ? styles.sentMessage : styles.receivedMessage,
        ]}
      >
        {isImage ? (
          <Image 
            source={{ uri: imageUri }} 
            style={styles.imageMessage}
            resizeMode="contain"
          />
        ) : (
          <Text style={styles.messageText}>{item.body}</Text>
        )}
        <Text style={styles.timestamp}>
          {new Date(item.timestamp).toLocaleTimeString([], {
            hour: '2-digit',
            minute: '2-digit',
          })}
        </Text>
      </View>
    );
  };

  return (
    <KeyboardAvoidingView
      style={styles.container}
      behavior={Platform.OS === 'ios' ? 'padding' : 'height'}
      keyboardVerticalOffset={Platform.OS === 'ios' ? 90 : 80}
    >
      <FlatList
        data={messages}
        renderItem={renderItem}
        keyExtractor={item => item.id}
        inverted
        contentContainerStyle={styles.messagesContainer}
        ListEmptyComponent={
          loading ? (
            <View style={styles.loadingContainer}>
              <ActivityIndicator size="large" color="#128C7E" />
            </View>
          ) : (
            <View style={styles.emptyContainer}>
              <Text>No messages found</Text>
            </View>
          )
        }
      />

      <View style={styles.inputContainer}>
        <TouchableOpacity onPress={handleImagePick} style={styles.iconButton}>
          <Icon name="plus" size={30} color="#128C7E"/>
        </TouchableOpacity>

        <TextInput
          style={styles.input}
          value={newMessage}
          onChangeText={setNewMessage}
          placeholder="Type a message"
          multiline
          editable={!sending}
        />
        <TouchableOpacity
          style={[
            styles.sendButton,
            (sending || !newMessage.trim()) && styles.disabledButton,
          ]}
          onPress={sendMessage}
          disabled={sending || !newMessage.trim()}
        >
          <Text style={styles.sendButtonText}>
            {sending ? 'Sending...' : 'Send'}
          </Text>
        </TouchableOpacity>
      </View>
    </KeyboardAvoidingView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f0f0f0',
  },
  loadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    paddingTop: 50,
  },
  emptyContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    paddingTop: 50,
  },
  messagesContainer: {
    paddingTop: 10,
    paddingBottom: 70,
  },
  messageBubble: {
    maxWidth: '80%',
    padding: 12,
    borderRadius: 18,
    marginVertical: 4,
    marginHorizontal: 16,
  },
  sentMessage: {
    alignSelf: 'flex-end',
    backgroundColor: '#DCF8C6',
    borderTopRightRadius: 4,
  },
  receivedMessage: {
    alignSelf: 'flex-start',
    backgroundColor: '#FFFFFF',
    borderTopLeftRadius: 4,
  },
  messageText: {
    fontSize: 16,
  },
  timestamp: {
    fontSize: 12,
    color: '#666666',
    marginTop: 4,
    textAlign: 'right',
  },
  inputContainer: {
    flexDirection: 'row',
    padding: 8,
    paddingBottom: 35,
    backgroundColor: '#FFFFFF',
    borderTopWidth: 1,
    borderTopColor: '#ECECEC',
  },
  input: {
    flex: 1,
    minHeight: 40,
    maxHeight: 120,
    paddingHorizontal: 12,
    paddingVertical: 8,
    backgroundColor: '#F5F5F5',
    borderRadius: 20,
    marginRight: 8,
    fontSize: 16,
  },
  sendButton: {
    justifyContent: 'center',
    alignItems: 'center',
    width: 60,
    height: 40,
    backgroundColor: '#128C7E',
    borderRadius: 20,
  },
  disabledButton: {
    opacity: 0.6,
  },
  sendButtonText: {
    color: 'white',
    fontWeight: 'bold',
    fontSize: 16,
  },
  iconButton: {
    justifyContent: 'center',
    alignItems: 'center',
    paddingHorizontal: 8,
  },
  imageMessage: {
    width: 200,
    height: 200,
    borderRadius: 10,
    marginBottom: 5,
  },
});

export default ThreadView;


///////////wokirng

///////////////////final wokrinf done 
















import React, { useState, useEffect } from 'react';
import {
  View,
  Text,
  FlatList,
  StyleSheet,
  TextInput,
  TouchableOpacity,
  KeyboardAvoidingView,
  Platform,
  ActivityIndicator,
  Alert,
  PermissionsAndroid,
  Image,
  Modal,
  Pressable,
} from 'react-native';
import { NativeModules } from 'react-native';
import { launchCamera, launchImageLibrary } from 'react-native-image-picker';
import Icon from 'react-native-vector-icons/FontAwesome6';

import {
  compressImageForSMS,
  isCompressedImage,
  decompressImageForDisplay,
} from '../Utils/smsImageUtils';

const { DirectMessagingModule } = NativeModules;

const ThreadView = ({ route, navigation }) => {
  const { address } = route.params;
  const [messages, setMessages] = useState([]);
  const [loading, setLoading] = useState(false);
  const [newMessage, setNewMessage] = useState('');
  const [sending, setSending] = useState(false);
  const [fullImageUri, setFullImageUri] = useState(null);

  useEffect(() => {
    navigation.setOptions({ title: address });
    loadMessages();
  }, [address]);

  const loadMessages = async () => {
    setLoading(true);
    try {
      const msgs = await DirectMessagingModule.getMessagesForThread(address);
      const formattedMsgs = msgs.map(msg => ({
        ...msg,
        type: msg.type || (msg.address === address ? 2 : 1),
      }));
      setMessages(formattedMsgs);
    } catch (error) {
      console.error('Failed to load messages:', error);
    } finally {
      setLoading(false);
    }
  };

  const sendMessage = async () => {
    if (!newMessage.trim()) return;
    setSending(true);
    const tempId = Date.now().toString();

    const newMsg = {
      id: tempId,
      body: newMessage,
      timestamp: Date.now(),
      type: 2,
      address: address,
    };

    setMessages(prev => [newMsg, ...prev]);
    setNewMessage('');

    try {
      await DirectMessagingModule.sendDirectSms(address, newMessage);
      await loadMessages();
    } catch (error) {
      console.error('Error sending message:', error);
      setMessages(prev => prev.filter(msg => msg.id !== tempId));
      Alert.alert('Error', 'Failed to send message');
    } finally {
      setSending(false);
    }
  };

  const requestCameraPermission = async () => {
    if (Platform.OS === 'android') {
      const hasPermission = await PermissionsAndroid.check(
        PermissionsAndroid.PERMISSIONS.CAMERA
      );
      if (hasPermission) return true;

      const granted = await PermissionsAndroid.request(
        PermissionsAndroid.PERMISSIONS.CAMERA,
        {
          title: 'Camera Permission',
          message: 'App needs access to your camera to take photos.',
          buttonNeutral: 'Ask Me Later',
          buttonNegative: 'Cancel',
          buttonPositive: 'OK',
        }
      );
      return granted === PermissionsAndroid.RESULTS.GRANTED;
    }
    return true;
  };

  const requestGalleryPermission = async () => {
    if (Platform.OS === 'android') {
      if (Platform.Version >= 30) {
        return true;
      } else if (Platform.Version >= 29) {
        const hasPermission = await PermissionsAndroid.check(
          PermissionsAndroid.PERMISSIONS.READ_EXTERNAL_STORAGE
        );
        if (hasPermission) return true;

        const granted = await PermissionsAndroid.request(
          PermissionsAndroid.PERMISSIONS.READ_EXTERNAL_STORAGE,
          {
            title: 'Storage Permission',
            message: 'App needs access to your files to select photos',
            buttonPositive: 'OK',
            buttonNegative: 'Cancel',
          }
        );
        return granted === PermissionsAndroid.RESULTS.GRANTED;
      } else {
        const hasWrite = await PermissionsAndroid.check(
          PermissionsAndroid.PERMISSIONS.WRITE_EXTERNAL_STORAGE
        );
        if (hasWrite) return true;

        const granted = await PermissionsAndroid.request(
          PermissionsAndroid.PERMISSIONS.WRITE_EXTERNAL_STORAGE,
          {
            title: 'Storage Permission',
            message: 'App needs access to your files to select photos',
            buttonPositive: 'OK',
            buttonNegative: 'Cancel',
          }
        );
        return granted === PermissionsAndroid.RESULTS.GRANTED;
      }
    }
    return true;
  };

  const handleImagePick = () => {
    Alert.alert('Select Image Source', '', [
      {
        text: 'Camera',
        onPress: async () => {
          try {
            const hasPermission = await requestCameraPermission();
            if (!hasPermission) {
              Alert.alert('Permission required', 'Camera permission denied');
              return;
            }

            launchCamera(
              {
                mediaType: 'photo',
                includeBase64: false,
                quality: 0.7,
                saveToPhotos: false,
                cameraType: 'back',
              },
              async response => {
                if (response.didCancel) return;
                if (response.errorCode) {
                  Alert.alert('Camera Error', response.errorMessage || 'Unknown error');
                  return;
                }

                if (response.assets?.[0]?.uri) {
                  try {
                    const compressed = await compressImageForSMS(response.assets[0].uri);
                    setNewMessage(compressed);
                  } catch (error) {
                    Alert.alert('Error', 'Failed to compress image');
                  }
                }
              }
            );
          } catch (error) {
            Alert.alert('Error', 'Failed to access camera');
          }
        },
      },
      {
        text: 'Gallery',
        onPress: async () => {
          try {
            if (Platform.OS === 'android' && Platform.Version < 29) {
              const hasPermission = await requestGalleryPermission();
              if (!hasPermission) return;
            }

            launchImageLibrary(
              {
                mediaType: 'photo',
                includeBase64: false,
                quality: 0.7,
                selectionLimit: 1,
              },
              async response => {
                if (response.didCancel) return;
                if (response.errorCode) {
                  Alert.alert('Gallery Error', response.errorMessage || 'Unknown error');
                  return;
                }

                if (response.assets?.[0]?.uri) {
                  try {
                    const compressed = await compressImageForSMS(response.assets[0].uri);
                    setNewMessage(compressed);
                  } catch (error) {
                    Alert.alert('Error', 'Failed to compress image');
                  }
                }
              }
            );
          } catch (error) {
            Alert.alert('Error', 'Failed to access gallery');
          }
        },
      },
      {
        text: 'Cancel',
        style: 'cancel',
      },
    ]);
  };

  const renderItem = ({ item }) => {
    const isImage = isCompressedImage(item.body);
    const imageUri = isImage ? decompressImageForDisplay(item.body) : null;

    return (
      <View
        style={[
          styles.messageBubble,
          item.type === 2 ? styles.sentMessage : styles.receivedMessage,
        ]}
      >
        {isImage ? (
          <TouchableOpacity onPress={() => setFullImageUri(imageUri)}>
            <Image
              source={{ uri: imageUri }}
              style={styles.imageMessage}
              resizeMode="contain"
            />
          </TouchableOpacity>
        ) : (
          <Text style={styles.messageText}>{item.body}</Text>
        )}
        <Text style={styles.timestamp}>
          {new Date(item.timestamp).toLocaleTimeString([], {
            hour: '2-digit',
            minute: '2-digit',
          })}
        </Text>
      </View>
    );
  };

  return (
    <>
      <KeyboardAvoidingView
        style={styles.container}
        behavior={Platform.OS === 'ios' ? 'padding' : 'height'}
        keyboardVerticalOffset={Platform.OS === 'ios' ? 90 : 80}
      >
        <FlatList
          data={messages}
          renderItem={renderItem}
          keyExtractor={item => item.id}
          inverted
          contentContainerStyle={styles.messagesContainer}
          ListEmptyComponent={
            loading ? (
              <View style={styles.loadingContainer}>
                <ActivityIndicator size="large" color="#128C7E" />
              </View>
            ) : (
              <View style={styles.emptyContainer}>
                <Text>No messages found</Text>
              </View>
            )
          }
        />

        <View style={styles.inputContainer}>
          <TouchableOpacity onPress={handleImagePick} style={styles.iconButton}>
            <Icon name="plus" size={30} color="#128C7E" />
          </TouchableOpacity>

          <TextInput
            style={styles.input}
            value={newMessage}
            onChangeText={setNewMessage}
            placeholder="Type a message"
            multiline
            editable={!sending}
          />
          <TouchableOpacity
            style={[
              styles.sendButton,
              (sending || !newMessage.trim()) && styles.disabledButton,
            ]}
            onPress={sendMessage}
            disabled={sending || !newMessage.trim()}
          >
            <Text style={styles.sendButtonText}>
              {sending ? 'Sending...' : 'Send'}
            </Text>
          </TouchableOpacity>
        </View>
      </KeyboardAvoidingView>

      {/* Fullscreen Image Modal */}
      <Modal visible={!!fullImageUri} transparent={true}>
        <View style={styles.modalContainer}>
          <Pressable style={styles.modalBackground} onPress={() => setFullImageUri(null)}>
            <Image
              source={{ uri: fullImageUri }}
              style={styles.fullImage}
              resizeMode="contain"
            />
          </Pressable>
        </View>
      </Modal>
    </>
  );
};

const styles = StyleSheet.create({
  container: { flex: 1, backgroundColor: '#f0f0f0' },
  loadingContainer: { flex: 1, justifyContent: 'center', alignItems: 'center', paddingTop: 50 },
  emptyContainer: { flex: 1, justifyContent: 'center', alignItems: 'center', paddingTop: 50 },
  messagesContainer: { paddingTop: 10, paddingBottom: 70 },
  messageBubble: {
    maxWidth: '80%',
    padding: 12,
    borderRadius: 18,
    marginVertical: 4,
    marginHorizontal: 16,
  },
  sentMessage: {
    alignSelf: 'flex-end',
    backgroundColor: '#DCF8C6',
    borderTopRightRadius: 4,
  },
  receivedMessage: {
    alignSelf: 'flex-start',
    backgroundColor: '#FFFFFF',
    borderTopLeftRadius: 4,
  },
  messageText: { fontSize: 16 },
  timestamp: {
    fontSize: 12,
    color: '#666666',
    marginTop: 4,
    textAlign: 'right',
  },
  inputContainer: {
    flexDirection: 'row',
    padding: 8,
    paddingBottom: 35,
    backgroundColor: '#FFFFFF',
    borderTopWidth: 1,
    borderTopColor: '#ECECEC',
  },
  input: {
    flex: 1,
    minHeight: 40,
    maxHeight: 120,
    paddingHorizontal: 12,
    paddingVertical: 8,
    backgroundColor: '#F5F5F5',
    borderRadius: 20,
    marginRight: 8,
    fontSize: 16,
  },
  sendButton: {
    justifyContent: 'center',
    alignItems: 'center',
    width: 60,
    height: 40,
    backgroundColor: '#128C7E',
    borderRadius: 20,
  },
  disabledButton: { opacity: 0.6 },
  sendButtonText: { color: 'white', fontWeight: 'bold', fontSize: 16 },
  iconButton: { justifyContent: 'center', alignItems: 'center', paddingHorizontal: 8 },
  imageMessage: { width: 200, height: 200, borderRadius: 10, marginBottom: 5 },
  modalContainer: {
    flex: 1,
    backgroundColor: '#000000CC',
    justifyContent: 'center',
    alignItems: 'center',
  },
  modalBackground: {
    width: '100%',
    height: '100%',
    justifyContent: 'center',
    alignItems: 'center',
  },
  fullImage: {
    width: '100%',
    height: '100%',
  },
});

export default ThreadView;




///stage 02
